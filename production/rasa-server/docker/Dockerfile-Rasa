# To-Do: Make Docker Builds Multi-Platform
# Base Stage - Rasa-Spacy-en is used as a base image
FROM rasa/rasa:main-spacy-en AS base
# Change user to root from rasa
USER root

# Update base image. It could be helpful for security reasons 
RUN apt-get update -qq && \
    apt-get upgrade -qq && \
    apt-get autoremove -y -qq && \
    apt-get autoclean -y -qq

# Build stage
FROM base AS build-stage
# Change current directory to build
WORKDIR /build
COPY requirements.txt /build
# Activate virtual environment. 
# Download python pacakges and compile some of them
# Install binaries. and the make things clear 
ENV PATH="/opt/venv/bin:$PATH"
RUN . /opt/venv/bin/activate && \
    pip install --no-cache-dir --upgrade pip wheel && \
    pip install --no-cache-dir -r requirements.txt

WORKDIR /rasa-server
# Copy autocorrect module from the host
COPY autocorrect ./autocorrect
# Download autocorrect module dictionary
RUN mkdir -p ./autocorrect/data && \
    python -c "import autocorrect; autocorrect.Speller('en_med')"
    
# Copy rasa config files from the host
COPY rasa ./rasa
# Train rasa model
# To-Do: Upload weights and then download them with `wget` instead of training in build stage
WORKDIR /rasa-server/rasa 
RUN rasa telemetry disable && \
    rasa train  

# Runtime image
FROM base AS runtime-stage
# Copy installed libraries and rasa-server from the build stage 
COPY --from=build-stage /opt/venv /opt/venv
COPY --from=build-stage /rasa-server /rasa-server

ENV PATH="/opt/venv/bin:$PATH"

WORKDIR /rasa-server/rasa 

RUN rasa telemetry disable
# Expose 5005 port for api 
EXPOSE 5005
# Create logs. And set an API enabled
ENTRYPOINT ["rasa", "run", "--log-file", "logs/rasa-server.log", "--enable-api", "--auth-token"]
# Run container with your token and command
CMD [ "YOUR TOKEN" ] 
